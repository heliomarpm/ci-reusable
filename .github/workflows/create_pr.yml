name: Create pull request

on:
  workflow_call:
    inputs:
      runs-on:
        required: false
        type: string
        default: 'ubuntu-latest'

      target-branch:
        description: 'Branch de destino do PR.'
        required: true
        type: string
      origin-branch:
        description: 'Branch origem do PR. Caso campo esteja vazio sera utilizada a branch atual do workflow.'
        required: false
        type: string
      target-create-branch:
        description: 'Caso target-branch não exista sera criada.'
        required: false
        type: boolean
        default: false
      target-base-branch:
        description: 'Branch base para criacao de target-branch. target-create-branch deve ser true'
        required: false
        type: string
      custom-title:
        required: false
        default: 'PR criado automaticamente.'
        type: string
      id-taac:
        required: false
        type: string
        default: ''
      ambiente:
        required: false
        type: string
        default: 'distribuida'
      custom-body:
        required: false
        type: string

      prefix-refs-tag:
        description: 'Para Pull requests abertos '
        required: false
        default: 'release/'
        type: string
      environment:
        required: false
        type: string
      is-pre-prod:
        required: false
        type: boolean
        default: false
      enable-github-app:
        required: false
        type: boolean
        default: false
    secrets:
      APPLICATION_ID:
        required: false
      APP_PRIVATE_KEY:
        required: false
      APPLICATION_ID_BH_1:
        required: false
      APP_PRIVATE_KEY_BH_1:
        required: false
      APPLICATION_ID_BH_2:
        required: false
      APP_PRIVATE_KEY_BH_2:
        required: false
      APPLICATION_ID_BH_3:
        required: false
      APP_PRIVATE_KEY_BH_3:
        required: false
      DG:
        required: false
    outputs:
      pr-number:
        description: "PR Number created"
        value: ${{ jobs.pull-request.outputs.pr-number }}
      pr-url:
        description: "URL for PR created"
        value: ${{ jobs.pull-request.outputs.pr-url }}

jobs:
  pull-request:
    environment: ${{ inputs.environment }}
    name: Create
    runs-on: ${{ inputs.runs-on }}
    outputs:
      pr-number: ${{ steps.auto-pull-request.outputs.pr-number }}
      pr-url: ${{ steps.auto-pull-request.outputs.pr-url }}
    steps:
      - name: Get Branch Name
        run: |
          if [[ "${{ inputs.origin-branch }}" == "" ]]; then
            if [[ "${{ github.ref_type }}" == "branch" ]]; then
              echo "branch_name=${{ github.ref_name }}" >> $GITHUB_ENV
            else
              echo "branch_name=${{ inputs.prefix-refs-tag }}${{ github.ref_name }}" >> $GITHUB_ENV
            fi
          else
            echo "branch_name=${{ inputs.origin-branch }}" >> $GITHUB_ENV
            echo ${{ inputs.origin-branch }}
          fi
          source $GITHUB_ENV
          echo "Use $branch_name branch"

      - name: Check open PRs
        id: check-open-prs
        uses: actions/github-script@v6
        with:
          script: |
            let useApp = false;
            const response = await github.rest.pulls.list({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            head: "itau-corp:${{ env.branch_name }}",
                            base: "${{ inputs.target-branch }}",
                            state: "open"
                            });

            if (response.data.length > 0 && !${{ inputs.is-pre-prod }}){
              console.log("Já existe PR aberto para essas branchs.")
            }else{
              useApp = true;
              console.log("Não existe PR aberto para essas branches.");
            }
            core.setOutput("use-app",useApp)

      # - name: Evaluate secrets
      #   id: evaluate_secrets
      #   run: |
      #     if [[ '${{ inputs.enable-github-app }}' != 'true' ]] && [[ '${{ steps.check-open-prs.outputs.use-app }}' != 'true' ]]; then
      #       echo "token=null" >> $GITHUB_OUTPUT
      #     elif [[ '${{ secrets.APP_PRIVATE_KEY_BH_1 }}' != '' || '${{ secrets.APP_PRIVATE_KEY_BH_2 }}' != '' || '${{ secrets.APP_PRIVATE_KEY_BH_3 }}' != '' ]]; then
      #       RESULT=$(( ($GITHUB_RUN_NUMBER % 3) ))
      #       echo $RESULT
      #       if [[ $RESULT -eq 0 && '${{ vars.APPLICATION_ID_BH_1 }}' != '' ]]; then
      #         echo "Exportando APPLICATION_ID_BH_1"
      #         echo "APPLICATION_ID_BH=${{ vars.APPLICATION_ID_BH_1 }}" >> $GITHUB_OUTPUT
      #         echo "Exportando APP_PRIVATE_KEY_BH_1"
      #         echo "APP_PRIVATE_KEY_BH<<EOF" >> $GITHUB_OUTPUT
      #         echo "${{ secrets.APP_PRIVATE_KEY_BH_1 }}" >> $GITHUB_OUTPUT
      #         echo "EOF" >> $GITHUB_OUTPUT
      #       elif [[ $RESULT -eq 1 && '${{ vars.APPLICATION_ID_BH_2 }}' != '' ]]; then
      #         echo "Exportando APPLICATION_ID_BH_2"
      #         echo "APPLICATION_ID_BH=${{ vars.APPLICATION_ID_BH_2 }}" >> $GITHUB_OUTPUT
      #         echo "Exportando APP_PRIVATE_KEY_BH_2"
      #         echo "APP_PRIVATE_KEY_BH<<EOF" >> $GITHUB_OUTPUT
      #         echo "${{ secrets.APP_PRIVATE_KEY_BH_2 }}" >> $GITHUB_OUTPUT
      #         echo "EOF" >> $GITHUB_OUTPUT
      #       elif [[ $RESULT -eq 2 && '${{ vars.APPLICATION_ID_BH_3 }}' != '' ]]; then
      #         echo "Exportando APPLICATION_ID_BH_3"
      #         echo "APPLICATION_ID_BH=${{ vars.APPLICATION_ID_BH_3 }}" >> $GITHUB_OUTPUT
      #         echo "Exportando APP_PRIVATE_KEY_BH_3"
      #         echo "APP_PRIVATE_KEY_BH<<EOF" >> $GITHUB_OUTPUT
      #         echo "${{ secrets.APP_PRIVATE_KEY_BH_3 }}" >> $GITHUB_OUTPUT
      #         echo "EOF" >> $GITHUB_OUTPUT
      #       else
      #         echo "Erro ao realizar a rotacao do token"
      #         exit 1
      #       fi
      #       echo "token=BH" >> $GITHUB_OUTPUT
      #     else
      #       echo "APPLICATION_ID_BH=${{ secrets.APPLICATION_ID }}" >> $GITHUB_OUTPUT
      #       echo "APP_PRIVATE_KEY_BH=${{ secrets.APP_PRIVATE_KEY }}" >> $GITHUB_OUTPUT
      #       echo "token=BH" >> $GITHUB_OUTPUT
      #     fi

      # - name: Get Token
      #   id: get_workflow_token
      #   if: steps.evaluate_secrets.outputs.token == 'BH'
      #   uses: peter-murray/workflow-application-token-action@v2
      #   with:
      #     application_id: ${{ steps.evaluate_secrets.outputs.APPLICATION_ID_BH }}
      #     application_private_key: ${{ steps.evaluate_secrets.outputs.APP_PRIVATE_KEY_BH }}

      - name: auto pull-request
        id: auto-pull-request
        uses: actions/github-script@v6
        with:
          # github-token: ${{ steps.get_workflow_token.outputs.token || github.token }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const listLabel = [
              {
                name: 'rollback',
                color: 'D93F0B',
                description: 'Utilizada somente para rollback. Criada automaticamente.'
              },
              {
                name: 'cancel-deployment',
                color: '5319E7',
                description: 'Utilizada somente para Cancelamento de Deployments em andamento. Criada automaticamente.'
              },
              {
                name: 'promote',
                color: '006B75',
                description: 'Utilizada somente para Promoção ou Rejeição de Deployments. Criada automaticamente.'
              },
              {
                name: 'rollback-piloto',
                color: 'E16605',
                description: 'Utilizada somente para rollback de piloto. Criada automaticamente.'
              }
            ]
            let prMessage = ''
            let isDep = context.repo.repo.split('-')[2] == 'dep'

            const inputs = ${{ toJSON(inputs) }}
            core.info('Adding custom-body')
            core.info(inputs["custom-body"])
            echo inputs
