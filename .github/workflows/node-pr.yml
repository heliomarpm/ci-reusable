# Workflow de Pull Request Automatizado para Node.js
# Cria ou atualiza um PR (develop -> main) e inclui o resumo de cobertura se dispon√≠vel.
name: Node.js Auto Pull Request

on:
  workflow_call:
    inputs:
      base_branch:
        description: "Branch de destino do PR (e.g., main)."
        required: false
        default: "main"
        type: string

      head_branch:
        description: "Branch de origem do PR (e.g., develop)."
        required: false
        default: "develop"
        type: string

      pr_title:
        description: "T√≠tulo do Pull Request."
        required: false
        type: string
        default: null
        # default: 'Merge Autom√°tico: ${{ github.ref_name }} para ${{ inputs.base_branch }}'

      test_coverage_command:
        description: "Comando para executar testes e garantir que o coverage-summary seja gerado para o corpo do PR."
        required: false
        default: "npm test -- --coverage --no-watch"
        type: string
      
      min_coverage_pct:
        description: "Percentual m√≠nimo de cobertura de linhas exigido para aprova√ß√£o do status check (0-100)."
        required: false
        default: 0
        type: number

      coverage_summary_path:
        description: "Caminho para o coverage-summary.json (default: coverage/coverage-summary.json)."
        required: false
        default: "coverage/coverage-summary.json"
        type: string

    secrets:
      GH_TOKEN:
        description: "Token GITHUB_TOKEN para permiss√µes de PR."
        required: true

jobs:
  create_or_update_pr:
    name: Criar/Atualizar PR (develop -> main)
    runs-on: ubuntu-latest

    permissions:
      contents: write # Necess√°rio para opera√ß√µes gerais de escrita
      pull-requests: write # ESSENCIAL: Concede permiss√£o para criar e manipular Pull Requests.
      actions: read # read para o contexto

    steps:
      - name: ‚¨áÔ∏è Checkout do C√≥digo Consumidor
        uses: actions/checkout@v4
        with:
          # Necess√°rio para evitar falhas do gh CLI em reposit√≥rios grandes
          fetch-depth: 0

      # Checkout do reposit√≥rio de templates para acessar o pr_template.md
      - name: ‚¨áÔ∏è Checkout do Template (pr_template.md)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/ci-reusable # Assume o mesmo owner, mas o reposit√≥rio de templates
          path: ./.github/workflows/actions/common/pr # Clonado em uma subpasta
          ref: main # Usar a branch est√°vel do template
          token: ${{ secrets.GH_TOKEN }} # Necess√°rio para acesso em reposit√≥rios privados

      - name: ‚öôÔ∏è Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: üì• Instalar Depend√™ncias do Projeto Consumidor
        run: npm install

      - name: üì• Instalar GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: üîê Autenticar GitHub CLI e Criar Labels
        run: |
          # Autentica o gh CLI usando o GH_TOKEN
          # O 'gh auth status' verifica se a autentica√ß√£o funcionou
          # echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token --hostname github.com
          gh auth setup-git

          # Garante que as labels existam (usando || true para n√£o falhar se a label j√° existir)
          gh label create "auto-generated" --description "PR criado automaticamente" --color "0E8A16" || true
          # gh label create "pending-review" --description "Aguardando revis√£o" --color "FBCA04" || true
          gh label create "coverage-failed" --description "Cobertura de testes abaixo do limite m√≠nimo." --color "D93F0B" || true
        env:
          # O token √© necess√°rio para os comandos 'gh'
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: üìä Gerar Cobertura, Avaliar Limite e Montar o Body do PR
        # Executa testes e salva a sa√≠da em um arquivo tempor√°rio
        run: |
          # Executa o comando de teste fornecido pelo input
          set -o pipefail
          ${{ inputs.test_coverage_command }} > coverage-report.txt 2>&1 || true

          # Extrai a porcentagem de cobertura de linhas (Assumindo formato Jest)
          COV_LINE_PCT=$(grep 'All files' coverage-report.txt | awk '{print $5}' | tr -d '%')
          
          # Define o limite m√≠nimo
          MIN_PCT=${{ inputs.min_coverage_pct }}
          
          # Avalia o limite e define vari√°veis de status
          if [ -z "$COV_LINE_PCT" ] || [ "$COV_LINE_PCT" -lt "$MIN_PCT" ]; then
            IS_COVERAGE_OK=false
            STATUS_EMOJI="üî¥ FALHA - Abaixo de ${MIN_PCT}%"
            STATUS_LABEL="coverage-failed"
            echo "‚ö†Ô∏è Cobertura de Linhas ($COV_LINE_PCT%) est√° ABAIXO do limite m√≠nimo ($MIN_PCT%)."
          else
            IS_COVERAGE_OK=true
            STATUS_EMOJI="‚úÖ SUCESSO - Acima de ${MIN_PCT}%"
            STATUS_LABEL="pending-review"
            echo "‚úÖ Cobertura de Linhas ($COV_LINE_PCT%) est√° OK (Acima de $MIN_PCT%)."
          fi

          # Formata o t√≠tulo com data (se o input for o default)
          PR_TITLE="${{ inputs.pr_title }}"
          if [[ "$PR_TITLE" == "" ]]; then
            PR_TITLE="üîÄ ${{ inputs.head_branch }} ‚Üí ${{ inputs.base_branch }}: $(date +'%Y-%m-%d')"
          fi

          # Extrai a tabela de cobertura do Jest (assumindo que Jest √© o runner)
          COV_TABLE=$(awk '/^--/ {flag=1; next} flag {print}' coverage-report.txt | head -n -3)

          # Monta o corpo do PR lendo o template e substituindo placeholders          
          cp pr-template-source/pr_template.md pr_body.md

          # Substitui os placeholders de linha √∫nica no pr_body.md (usando cp tempor√°rio para evitar falhas do sed/awk)
          sed -i "s|<!-- STATUS_EMOJI_PLACEHOLDER -->|$STATUS_EMOJI|g" pr_body.md
          sed -i "s|<!-- COV_PCT_PLACEHOLDER -->|$COV_LINE_PCT|g" pr_body.md
          sed -i "s|s|<!-- MIN_PCT_PLACEHOLDER -->|$MIN_PCT|g" pr_body.md

          # 3. Injeta a COV_TABLE no bloco de codefence
          # Localiza a linha do placeholder e a substitui pelo conte√∫do da tabela.
          # Usaremos awk para garantir a substitui√ß√£o multi-linhas.
          awk -v table="$COV_TABLE" '
              /<!-- COVERAGE_TABLE_PLACEHOLDER -->/ {
                  print table
              }
              !/<!-- COVERAGE_TABLE_PLACEHOLDER -->/ {
                  print $0
              }
          ' pr_body.md > pr_body_final.md
          
          # 4. Finaliza a prepara√ß√£o
          mv pr_body_final.md pr_body.md
          
          # Passa vari√°veis importantes para o ambiente para o pr√≥ximo step
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "STATUS_LABEL=$STATUS_LABEL" >> $GITHUB_ENV
          echo "IS_COVERAGE_OK=$IS_COVERAGE_OK" >> $GITHUB_ENV

      - name: ü§ñ Criar ou Atualizar Pull Request
        run: |
          # Tenta encontrar um PR existente
          PR_NUMBER=$(gh pr list --base ${{ inputs.base_branch }} --head ${{ inputs.head_branch }} --json number --jq '.[0].number')

          if [ -z "$PR_NUMBER" ]; then
            # Se n√£o houver PR, cria uma nova
            echo "Nenhuma PR encontrada, criando nova PR..."
            gh pr create \
              --base ${{ inputs.base_branch }} \
              --head ${{ inputs.head_branch }} \
              --title "$PR_TITLE" \
              --body-file pr_body.md \
              --label "auto-generated,pending-review" \
              --assignee "${{ github.actor }}"
          else
            # Se a PR j√° existir, atualiza o corpo
            echo "Encontrado PR aberto com o n√∫mero $PR_NUMBER, atualizando corpo e designados..."
            gh pr edit $PR_NUMBER \
              --body-file pr_body.md \
              --add-assignee "${{ github.actor }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
